# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j8h_m1k3rU5lUI6audcsnbssG56Z3Qip
"""

import streamlit as st
import google.generativeai as genai
from PyPDF2 import PdfReader
from docx import Document
import io
import os

# Constants
GEMINI_API_KEY = "AIzaSyDhKXVVtHY-BO4MOcMsoGAHYGb6P-AdfVg"

def extract_text_from_pdf(file):
    """Extract text content from a PDF file."""
    try:
        pdf_reader = PdfReader(file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text()
        return text.strip()
    except Exception as e:
        st.error(f"Error extracting text from PDF: {str(e)}")
        return None

def extract_text_from_docx(file):
    """Extract text content from a DOCX file."""
    try:
        doc = Document(file)
        text = []
        for paragraph in doc.paragraphs:
            text.append(paragraph.text)
        return '\n'.join(text).strip()
    except Exception as e:
        st.error(f"Error extracting text from DOCX: {str(e)}")
        return None

def extract_text_from_document(file, file_type):
    """Extract text based on document type."""
    if file_type == 'pdf':
        return extract_text_from_pdf(file)
    elif file_type == 'docx':
        return extract_text_from_docx(file)
    else:
        st.error(f"Unsupported file type: {file_type}")
        return None

def initialize_gemini():
    """Initialize the Gemini API."""
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-pro')
        return model
    except Exception as e:
        st.error(f"Error initializing Gemini API: {str(e)}")
        return None

def get_gemini_response(model, question, context):
    """Get response from Gemini API for the given question and context."""
    try:
        prompt = f"""Context: {context}\n\nQuestion: {question}\n\nPlease answer the question based on the context provided."""
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.error(f"Error getting response from Gemini API: {str(e)}")
        return None

def get_file_extension(filename):
    """Get the file extension from filename."""
    return os.path.splitext(filename)[1].lower()[1:]

# Streamlit UI

def main():
    st.title("Document Question & Answer System")
    st.markdown("### Supported formats: PDF, DOCX")

    # Initialize Gemini
    model = initialize_gemini()
    if not model:
        st.error("Failed to initialize Gemini API. Please check your API key.")
        return

    # File upload
    uploaded_file = st.file_uploader("Upload your document", type=['pdf', 'docx'])

    if uploaded_file is not None:
        file_type = get_file_extension(uploaded_file.name)

        if file_type not in ['pdf', 'docx']:
            st.error(f"Unsupported file type: {file_type}")
            st.info("Please upload either a PDF or DOCX file.")
            return

        # Extract text from document
        st.info(f"Extracting text from {file_type.upper()} file...")
        document_text = extract_text_from_document(io.BytesIO(uploaded_file.read()), file_type)
        print(document_text)
        if document_text:
            st.success("Document processed successfully!")

            # User question input
            question = st.text_input("Enter your question:")

            if question:
                st.info("Getting answer...")
                answer = get_gemini_response(model, question, document_text)

                if answer:
                    st.write("**Answer:**")
                    st.write(answer)
                else:
                    st.error("Failed to get response from Gemini API.")
        else:
            st.error("Failed to extract text from document.")

    else:
        st.info("Please upload a PDF or DOCX document to get started.")
##print(extract_text_from_document)

if __name__ == "__main__":
    main()

